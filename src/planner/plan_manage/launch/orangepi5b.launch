<launch>
  <arg name="drone_id" value="3"/>
  <!-- size of map, change the size inflate x, y, z according to your application -->
  <arg name="map_size_x" value="40.0"/>
  <arg name="map_size_y" value="40.0"/>
  <arg name="map_size_z" value=" 3.0"/>

  <!-- topic of your odometry such as VIO or LIO 
  <arg name="odom_topic" value="/ov_msckf/odomimu" />
  <arg name="odom_topic" value="/mavros/local_position/odom" />
   -->
  <arg name="odom_topic" value="/t265/odom/sample" />

  <!-- main algorithm params -->
  <include file="$(find ego_planner)/launch/advanced_param.xml">

    <arg name="map_size_x_" value="$(arg map_size_x)"/>
    <arg name="map_size_y_" value="$(arg map_size_y)"/>
    <arg name="map_size_z_" value="$(arg map_size_z)"/>
    <arg name="odometry_topic" value="$(arg odom_topic)"/>

    <!-- camera pose: transform of camera frame in the world frame -->
    <!-- depth topic: depth image, 640x480 by default -->
    <arg name="width" value="848"/>
    <arg name="height" value="480"/>
    <!-- don't set cloud_topic if you already set these ones! -->
    <arg name="camera_pose_topic" value="/t265/odom/sample"/>
    <arg name="depth_topic" value="/d400/depth/image_rect_raw"/>
    <!-- intrinsic params of the depth camera -->
    <arg name="cx" value="320.4154052734375"/>
    <arg name="cy" value="237.77969360351562"/>
    <arg name="fx" value="383.89483642578125"/>
    <arg name="fy" value="383.89483642578125"/>

    <!-- topic of point cloud measurement, such as from LIDAR  -->
    <!-- don't set camera pose and depth, if you already set this one! -->
    <!--
    <arg name="cloud_topic" value="/pcl_render_node/cloud"/>
    <arg name="cloud_topic" value="/drone_$(arg drone_id)_stereo_cam/point_cloud"/>
    -->

    <!-- maximum velocity and acceleration the drone will reach -->
    <arg name="max_vel" value="0.5" />
    <arg name="max_acc" value="0.5" />

    <!--always set to 1.5 times grater than sensing horizen-->
    <arg name="planning_horizon" value="6.0" /> 

    <!-- 1: use 2D Nav Goal to select goal  -->
    <!-- 2: use global waypoints below  -->
    <arg name="flight_type" value="1" />
    
    <!-- global waypoints -->
    <!-- It generates a piecewise min-snap traj passing all waypoints -->
    <arg name="point_num" value="5" />

    <arg name="point0_x" value="-15.0" />
    <arg name="point0_y" value="0.0" />
    <arg name="point0_z" value="1.0" />

    <arg name="point1_x" value="0.0" />
    <arg name="point1_y" value="15.0" />
    <arg name="point1_z" value="1.0" />

    <arg name="point2_x" value="15.0" />
    <arg name="point2_y" value="0.0" />
    <arg name="point2_z" value="1.0" />

    <arg name="point3_x" value="0.0" />
    <arg name="point3_y" value="-15.0" />
    <arg name="point3_z" value="1.0" />

    <arg name="point4_x" value="-15.0" />
    <arg name="point4_y" value="0.0" />
    <arg name="point4_z" value="1.0" />
    
  </include>
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_baselink" args="0 0 0 0 0 0 /base /base_link"/>
  <!-- trajectory server -->
  <node pkg="ego_planner" name="traj_server" type="traj_server" output="screen">
    <remap from="/position_cmd" to="planning/pos_cmd"/>

    <remap from="/odom_world" to="$(arg odom_topic)"/>
    <param name="traj_server/time_forward" value="1.0" type="double"/>
  </node>

<!-- use offboard control with PX4 
  <node pkg="waypoint_generator" name="waypoint_generator" type="waypoint_generator" output="screen">
    <remap from="~odom" to="$(arg odom_topic)"/>        
    <remap from="~goal" to="/trajectory_publisher/goal"/>
    <remap from="~traj_start_trigger" to="/traj_start_trigger" />
    <param name="waypoint_type" value="manual-lonely-waypoint"/>    
  </node>
  -->
<!-- Use move_base to control -->
<node pkg="waypoint_generator" name="waypoint_generator" type="waypoint_generator" output="screen">
    <remap from="~odom" to="$(arg odom_topic)"/>        
    <remap from="~goal" to="/move_base_simple/goal"/>
    <remap from="~traj_start_trigger" to="/traj_start_trigger" />
    <param name="waypoint_type" value="manual-lonely-waypoint"/>    
  </node>

  <!-- use simulator 
  <include file="$(find ego_planner)/launch/simulator.xml">
    <arg name="map_size_x_" value="$(arg map_size_x)"/>
    <arg name="map_size_y_" value="$(arg map_size_y)"/>
    <arg name="map_size_z_" value="$(arg map_size_z)"/>
    <arg name="c_num" value="200"/>
    <arg name="p_num" value="200"/>
    <arg name="min_dist" value="1.2"/>

    <arg name="odometry_topic" value="$(arg odom_topic)" />
  </include>
  -->

  <node pkg="odom_visualization" name="odom_visualization" type="odom_visualization" output="screen">
        <remap from="~odom" to="$(arg odom_topic)"/>
        <param name="color/a" value="1.0"/>
        <param name="color/r" value="0.0"/>
        <param name="color/g" value="0.0"/>
        <param name="color/b" value="1.0"/>
        <param name="covariance_scale" value="100.0"/>
        <param name="robot_scale" value="1.0"/>
  </node>

<!--
          <param name="velocity_yaw" value="true" />
  <node pkg="geometric_controller" type="geometric_controller_node" name="geometric_controller" output="screen">
          <param name="mav_name" type="string" value="visquad" />
          <param name="fc_type" type="string" value="px4" />
          <remap from="command/bodyrate_command" to="/mavros/setpoint_raw/attitude"/>
          <param name="ctrl_mode" value="2" />
          <param name="enable_sim" value="true" />
          <param name="max_acc" value="0.5" />
          <param name="goal_dist" value="18.0" />
          <param name="Kpos_x" value="8.0" />
          <param name="Kpos_y" value="8.0" />
          <param name="Kpos_z" value="10.0" />
  </node>
-->

</launch>
